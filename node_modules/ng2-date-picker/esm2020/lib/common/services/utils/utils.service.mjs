import { ECalendarValue } from '../../types/calendar-value-enum';
import { ElementRef, Injectable } from '@angular/core';
import { dayjsRef } from '../../dayjs/dayjs.ref';
import * as i0 from "@angular/core";
export class UtilsService {
    static debounce(func, wait) {
        let timeout;
        return function () {
            const context = this, args = arguments;
            timeout = clearTimeout(timeout);
            setTimeout(() => {
                func.apply(context, args);
            }, wait);
        };
    }
    ;
    createArray(size) {
        return new Array(size).fill(1);
    }
    convertToDayjs(date, format) {
        if (!date) {
            return null;
        }
        else if (typeof date === 'string') {
            return dayjsRef(date, format);
        }
        else {
            return dayjsRef(date.toDate());
        }
    }
    isDateValid(date, format) {
        if (date === '') {
            return true;
        }
        return dayjsRef(date, format, true).isValid();
    }
    // todo:: add unit test
    getDefaultDisplayDate(current, selected, allowMultiSelect, minDate) {
        if (current) {
            return dayjsRef(current.toDate());
        }
        else if (minDate && minDate.isAfter(dayjsRef())) {
            return dayjsRef(minDate.toDate());
        }
        else if (allowMultiSelect) {
            if (selected && selected[selected.length]) {
                return dayjsRef(selected[selected.length].toDate());
            }
        }
        else if (selected && selected[0]) {
            return dayjsRef(selected[0].toDate());
        }
        return dayjsRef();
    }
    // todo:: add unit test
    getInputType(value, allowMultiSelect) {
        if (Array.isArray(value)) {
            if (!value.length) {
                return ECalendarValue.DayjsArr;
            }
            else if (typeof value[0] === 'string') {
                return ECalendarValue.StringArr;
            }
            else if (dayjsRef.isDayjs(value[0])) {
                return ECalendarValue.DayjsArr;
            }
        }
        else {
            if (typeof value === 'string') {
                return ECalendarValue.String;
            }
            else if (dayjsRef.isDayjs(value)) {
                return ECalendarValue.Dayjs;
            }
        }
        return allowMultiSelect ? ECalendarValue.DayjsArr : ECalendarValue.Dayjs;
    }
    // todo:: add unit test
    convertToDayjsArray(value, config) {
        let retVal;
        switch (this.getInputType(value, config.allowMultiSelect)) {
            case (ECalendarValue.String):
                retVal = value ? [dayjsRef(value, config.format, true)] : [];
                break;
            case (ECalendarValue.StringArr):
                retVal = value.map(v => v ? dayjsRef(v, config.format, true) : null).filter(Boolean);
                break;
            case (ECalendarValue.Dayjs):
                retVal = value ? [dayjsRef(value.toDate())] : [];
                break;
            case (ECalendarValue.DayjsArr):
                retVal = (value || []).map(v => dayjsRef(v.toDate()));
                break;
            default:
                retVal = [];
        }
        return retVal;
    }
    // todo:: add unit test
    convertFromDayjsArray(format, value, convertTo) {
        switch (convertTo) {
            case (ECalendarValue.String):
                return value[0] && value[0].format(format);
            case (ECalendarValue.StringArr):
                return value.filter(Boolean).map(v => v.format(format));
            case (ECalendarValue.Dayjs):
                return value[0] ? dayjsRef(value[0].toDate()) : value[0];
            case (ECalendarValue.DayjsArr):
                return value ? value.map(v => dayjsRef(v.toDate())) : value;
            default:
                return value;
        }
    }
    convertToString(value, format) {
        let tmpVal;
        if (typeof value === 'string') {
            tmpVal = [value];
        }
        else if (Array.isArray(value)) {
            if (value.length) {
                tmpVal = value.map((v) => {
                    return this.convertToDayjs(v, format).format(format);
                });
            }
            else {
                tmpVal = value;
            }
        }
        else if (dayjsRef.isDayjs(value)) {
            tmpVal = [value.format(format)];
        }
        else {
            return '';
        }
        return tmpVal.filter(Boolean).join(' | ');
    }
    // todo:: add unit test
    clearUndefined(obj) {
        if (!obj) {
            return obj;
        }
        Object.keys(obj).forEach((key) => (obj[key] === undefined) && delete obj[key]);
        return obj;
    }
    updateSelected(isMultiple, currentlySelected, date, granularity = 'day') {
        if (isMultiple) {
            return !date.selected
                ? currentlySelected.concat([date.date])
                : currentlySelected.filter(d => !d.isSame(date.date, granularity));
        }
        else {
            return !date.selected ? [date.date] : [];
        }
    }
    closestParent(element, selector) {
        if (!element) {
            return undefined;
        }
        const match = element.querySelector(selector);
        return match || this.closestParent(element.parentElement, selector);
    }
    onlyTime(m) {
        return m && dayjsRef.isDayjs(m) && dayjsRef(m.format('HH:mm:ss'), 'HH:mm:ss');
    }
    granularityFromType(calendarType) {
        switch (calendarType) {
            case 'time':
                return 'second';
            case 'daytime':
                return 'second';
            default:
                return calendarType;
        }
    }
    createValidator({ minDate, maxDate, minTime, maxTime }, format, calendarType) {
        let isValid;
        let value;
        const validators = [];
        const granularity = this.granularityFromType(calendarType);
        if (minDate) {
            const md = this.convertToDayjs(minDate, format);
            validators.push({
                key: 'minDate',
                isValid: () => {
                    const _isValid = value.every(val => val.isSameOrAfter(md, granularity));
                    isValid = isValid ? _isValid : false;
                    return _isValid;
                }
            });
        }
        if (maxDate) {
            const md = this.convertToDayjs(maxDate, format);
            validators.push({
                key: 'maxDate',
                isValid: () => {
                    const _isValid = value.every(val => val.isSameOrBefore(md, granularity));
                    isValid = isValid ? _isValid : false;
                    return _isValid;
                }
            });
        }
        if (minTime) {
            const md = this.onlyTime(this.convertToDayjs(minTime, format));
            validators.push({
                key: 'minTime',
                isValid: () => {
                    const _isValid = value.every(val => this.onlyTime(val).isSameOrAfter(md));
                    isValid = isValid ? _isValid : false;
                    return _isValid;
                }
            });
        }
        if (maxTime) {
            const md = this.onlyTime(this.convertToDayjs(maxTime, format));
            validators.push({
                key: 'maxTime',
                isValid: () => {
                    const _isValid = value.every(val => this.onlyTime(val).isSameOrBefore(md));
                    isValid = isValid ? _isValid : false;
                    return _isValid;
                }
            });
        }
        return (inputVal) => {
            isValid = true;
            value = this.convertToDayjsArray(inputVal, {
                format,
                allowMultiSelect: true
            }).filter(Boolean);
            if (!value.every(val => val.isValid())) {
                return {
                    format: {
                        given: inputVal
                    }
                };
            }
            const errors = validators.reduce((map, err) => {
                if (!err.isValid()) {
                    map[err.key] = {
                        given: value
                    };
                }
                return map;
            }, {});
            return !isValid ? errors : null;
        };
    }
    datesStringToStringArray(value) {
        return (value || '').split('|').map(m => m.trim()).filter(Boolean);
    }
    getValidDayjsArray(value, format) {
        return this.datesStringToStringArray(value)
            .filter(d => this.isDateValid(d, format))
            .map(d => dayjsRef(d, format));
    }
    shouldShowCurrent(showGoToCurrent, mode, min, max) {
        return showGoToCurrent &&
            mode !== 'time' &&
            this.isDateInRange(dayjsRef(), min, max);
    }
    isDateInRange(date, from, to) {
        if (!date) {
            return false;
        }
        if (!from && !to) {
            return true;
        }
        if (!from && to) {
            return date.isSameOrBefore(to);
        }
        if (from && !to) {
            return date.isSameOrAfter(from);
        }
        return date.isBetween(from, to, 'day', '[]');
    }
    convertPropsToDayjs(obj, format, props) {
        props.forEach((prop) => {
            if (obj.hasOwnProperty(prop)) {
                obj[prop] = this.convertToDayjs(obj[prop], format);
            }
        });
    }
    shouldResetCurrentView(prevConf, currentConf) {
        if (prevConf && currentConf) {
            if (!prevConf.min && currentConf.min) {
                return true;
            }
            else if (prevConf.min && currentConf.min && !prevConf.min.isSame(currentConf.min, 'd')) {
                return true;
            }
            else if (!prevConf.max && currentConf.max) {
                return true;
            }
            else if (prevConf.max && currentConf.max && !prevConf.max.isSame(currentConf.max, 'd')) {
                return true;
            }
            return false;
        }
        return false;
    }
    getNativeElement(elem) {
        if (!elem) {
            return null;
        }
        else if (typeof elem === 'string') {
            return document.querySelector(elem);
        }
        else if (elem instanceof ElementRef) {
            return elem.nativeElement;
        }
        else {
            return elem;
        }
    }
}
UtilsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: UtilsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
UtilsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: UtilsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: UtilsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,