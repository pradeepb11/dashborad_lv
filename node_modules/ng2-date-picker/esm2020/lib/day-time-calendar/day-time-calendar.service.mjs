import { Injectable } from '@angular/core';
import { dayjsRef } from '../common/dayjs/dayjs.ref';
import * as i0 from "@angular/core";
import * as i1 from "../common/services/utils/utils.service";
import * as i2 from "../day-calendar/day-calendar.service";
import * as i3 from "../time-select/time-select.service";
const DAY_FORMAT = 'YYYYMMDD';
const TIME_FORMAT = 'HH:mm:ss';
const COMBINED_FORMAT = DAY_FORMAT + TIME_FORMAT;
export class DayTimeCalendarService {
    constructor(utilsService, dayCalendarService, timeSelectService) {
        this.utilsService = utilsService;
        this.dayCalendarService = dayCalendarService;
        this.timeSelectService = timeSelectService;
        this.DEFAULT_CONFIG = {};
    }
    getConfig(config) {
        return {
            ...this.DEFAULT_CONFIG,
            ...this.timeSelectService.getConfig(config),
            ...this.dayCalendarService.getConfig(config)
        };
    }
    updateDay(current, day, config) {
        const time = current ? current : dayjsRef();
        let updated = dayjsRef(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);
        if (config.min) {
            const min = config.min;
            updated = min.isAfter(updated) ? min : updated;
        }
        if (config.max) {
            const max = config.max;
            updated = max.isBefore(updated) ? max : updated;
        }
        return updated;
    }
    updateTime(current, time) {
        const day = current ? current : dayjsRef();
        return dayjsRef(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);
    }
}
DayTimeCalendarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: DayTimeCalendarService, deps: [{ token: i1.UtilsService }, { token: i2.DayCalendarService }, { token: i3.TimeSelectService }], target: i0.ɵɵFactoryTarget.Injectable });
DayTimeCalendarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: DayTimeCalendarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: DayTimeCalendarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.UtilsService }, { type: i2.DayCalendarService }, { type: i3.TimeSelectService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LXRpbWUtY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1kYXRlLXBpY2tlci9zcmMvbGliL2RheS10aW1lLWNhbGVuZGFyL2RheS10aW1lLWNhbGVuZGFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQU16QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7Ozs7O0FBR25ELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM5QixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFDL0IsTUFBTSxlQUFlLEdBQUcsVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUtqRCxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLFlBQW9CLFlBQTBCLEVBQzFCLGtCQUFzQyxFQUN0QyxpQkFBb0M7UUFGcEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBSi9DLG1CQUFjLEdBQTJCLEVBQUUsQ0FBQztJQUtyRCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQThCO1FBQ3RDLE9BQU87WUFDTCxHQUFHLElBQUksQ0FBQyxjQUFjO1lBQ3RCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFDM0MsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztTQUM3QyxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsQ0FBQyxPQUFjLEVBQUUsR0FBVSxFQUFFLE1BQThCO1FBQ2xFLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRTNGLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNkLE1BQU0sR0FBRyxHQUFVLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDOUIsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2QsTUFBTSxHQUFHLEdBQVUsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUM5QixPQUFPLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDakQ7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQWMsRUFBRSxJQUFXO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUUzQyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQzs7bUhBckNVLHNCQUFzQjt1SEFBdEIsc0JBQXNCLGNBRm5CLE1BQU07MkZBRVQsc0JBQXNCO2tCQUhsQyxVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7VXRpbHNTZXJ2aWNlfSBmcm9tICcuLi9jb21tb24vc2VydmljZXMvdXRpbHMvdXRpbHMuc2VydmljZSc7XG5pbXBvcnQge0RheUNhbGVuZGFyU2VydmljZX0gZnJvbSAnLi4vZGF5LWNhbGVuZGFyL2RheS1jYWxlbmRhci5zZXJ2aWNlJztcbmltcG9ydCB7VGltZVNlbGVjdFNlcnZpY2V9IGZyb20gJy4uL3RpbWUtc2VsZWN0L3RpbWUtc2VsZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHtJRGF5VGltZUNhbGVuZGFyQ29uZmlnfSBmcm9tICcuL2RheS10aW1lLWNhbGVuZGFyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQge2RheWpzUmVmfSBmcm9tICcuLi9jb21tb24vZGF5anMvZGF5anMucmVmJztcbmltcG9ydCB7RGF5anN9IGZyb20gJ2RheWpzJztcblxuY29uc3QgREFZX0ZPUk1BVCA9ICdZWVlZTU1ERCc7XG5jb25zdCBUSU1FX0ZPUk1BVCA9ICdISDptbTpzcyc7XG5jb25zdCBDT01CSU5FRF9GT1JNQVQgPSBEQVlfRk9STUFUICsgVElNRV9GT1JNQVQ7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGF5VGltZUNhbGVuZGFyU2VydmljZSB7XG4gIHJlYWRvbmx5IERFRkFVTFRfQ09ORklHOiBJRGF5VGltZUNhbGVuZGFyQ29uZmlnID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB1dGlsc1NlcnZpY2U6IFV0aWxzU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBkYXlDYWxlbmRhclNlcnZpY2U6IERheUNhbGVuZGFyU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSB0aW1lU2VsZWN0U2VydmljZTogVGltZVNlbGVjdFNlcnZpY2UpIHtcbiAgfVxuXG4gIGdldENvbmZpZyhjb25maWc6IElEYXlUaW1lQ2FsZW5kYXJDb25maWcpOiBJRGF5VGltZUNhbGVuZGFyQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5ERUZBVUxUX0NPTkZJRyxcbiAgICAgIC4uLnRoaXMudGltZVNlbGVjdFNlcnZpY2UuZ2V0Q29uZmlnKGNvbmZpZyksXG4gICAgICAuLi50aGlzLmRheUNhbGVuZGFyU2VydmljZS5nZXRDb25maWcoY29uZmlnKVxuICAgIH07XG4gIH1cblxuICB1cGRhdGVEYXkoY3VycmVudDogRGF5anMsIGRheTogRGF5anMsIGNvbmZpZzogSURheVRpbWVDYWxlbmRhckNvbmZpZyk6IERheWpzIHtcbiAgICBjb25zdCB0aW1lID0gY3VycmVudCA/IGN1cnJlbnQgOiBkYXlqc1JlZigpO1xuICAgIGxldCB1cGRhdGVkID0gZGF5anNSZWYoZGF5LmZvcm1hdChEQVlfRk9STUFUKSArIHRpbWUuZm9ybWF0KFRJTUVfRk9STUFUKSwgQ09NQklORURfRk9STUFUKTtcblxuICAgIGlmIChjb25maWcubWluKSB7XG4gICAgICBjb25zdCBtaW4gPSA8RGF5anM+Y29uZmlnLm1pbjtcbiAgICAgIHVwZGF0ZWQgPSBtaW4uaXNBZnRlcih1cGRhdGVkKSA/IG1pbiA6IHVwZGF0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5tYXgpIHtcbiAgICAgIGNvbnN0IG1heCA9IDxEYXlqcz5jb25maWcubWF4O1xuICAgICAgdXBkYXRlZCA9IG1heC5pc0JlZm9yZSh1cGRhdGVkKSA/IG1heCA6IHVwZGF0ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG4gIH1cblxuICB1cGRhdGVUaW1lKGN1cnJlbnQ6IERheWpzLCB0aW1lOiBEYXlqcyk6IERheWpzIHtcbiAgICBjb25zdCBkYXkgPSBjdXJyZW50ID8gY3VycmVudCA6IGRheWpzUmVmKCk7XG5cbiAgICByZXR1cm4gZGF5anNSZWYoZGF5LmZvcm1hdChEQVlfRk9STUFUKSArIHRpbWUuZm9ybWF0KFRJTUVfRk9STUFUKSwgQ09NQklORURfRk9STUFUKTtcbiAgfVxufVxuIl19